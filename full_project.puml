@startuml
class com.example.projectai.ServletInitializer {
# SpringApplicationBuilder configure(SpringApplicationBuilder)
}
interface com.example.projectai.repository.CustomerRepository {
~ Optional<CustomerEntity> findByUser(String)
}
class com.example.projectai.dto.FileDTO {
- String fileName
- String contentType
- String fileDownloadUri
- Long fileSize
}
interface com.example.projectai.manager.IPaymentManagerService {
~ List<PaymentDTO> findAllPaymentDTO()
~ PaymentDTO save(String,MultipartFile,String)
~ PaymentDTO saveHandPayment(String,PaymentDTO)
~ PaymentDTO update(PaymentDTO)
~ Integer delete(Map<String,List<String>>)
~ List<PaymentEntity> findPaymentByCustomer(String)
~ List<PaymentDTO> findAllPaymentByCustomer(String,String)
}
class com.example.projectai.dto.CustomerDTO {
- String id
- String firstName
- String lastName
- Float personalIncome
- String monthlySpending
- UserDTO user
}
interface com.example.projectai.service.StorageStrategy {
~ String[] uploadFile(MultipartFile)
~ ResponseEntity<Object> downloadFile(String,HttpServletRequest)
}
class com.example.projectai.Constant.SystemConstant {
+ {static} String USER
+ {static} String ADMIN
+ {static} String DAILY
+ {static} String MONTHLY
}
class com.example.projectai.manager.Impl.CustomerManagerServiceImpl {
- {static} ModelMapper modelMapper
~ ICustomerService customerService
~ IUserService userService
~ JwtProvider jwtProvider
+ List<CustomerDTO> findAllCustomerDTO()
+ CustomerDTO save(CustomerDTO,String)
+ Integer delete(Map<String,List<String>>)
+ Optional<CustomerDTO> getCustomerByToken(String)
}
class com.example.projectai.dto.UserDTO {
- String id
- String username
- String password
- String email
- String avatar
- RoleDTO role
}
interface com.example.projectai.service.IPaymentService {
~ List<PaymentEntity> findAllPayment()
~ PaymentEntity save(PaymentEntity)
~ boolean delete(String)
~ List<PaymentEntity> findAllByCustomer(String)
~ List<PaymentEntity> findAllByCustomerAndType(String,String)
~ Optional<PaymentEntity> findByCustomer(String)
}
interface com.example.projectai.service.ISendGridEmailService {
~ void sendMail(String,String,String)
}
class com.example.projectai.controller.CustomerController {
~ ICustomerManagerService customerManagerService
~ JwtProvider jwtProvider
~ IUserService userService
+ ResponseEntity<List<CustomerDTO>> findAllCustomer()
+ ResponseEntity<CustomerDTO> createCustomer(HttpServletRequest,CustomerDTO)
+ ResponseEntity<CustomerDTO> getProfileCustomer(HttpServletRequest)
+ ResponseEntity<String> deleteCustomer(Map<String,List<String>>,HttpServletRequest)
}
class com.example.projectai.config.ConfigValid {
+ ValidatingMongoEventListener validatingMongoEventListener()
+ LocalValidatorFactoryBean validator()
}
class com.example.projectai.security.jwt.JwtEntryPoint {
- {static} Logger logger
+ void commence(HttpServletRequest,HttpServletResponse,AuthenticationException)
}
class com.example.projectai.dto.JwtResponse {
- String token
- String type
- String name
- Collection<? extends GrantedAuthority> roles
}
class com.example.projectai.security.jwt.JwtTokenFilter {
- {static} Logger logger
- JwtProvider jwtProvider
- UserDetailService userDetailService
# void doFilterInternal(HttpServletRequest,HttpServletResponse,FilterChain)
+ String getJwt(HttpServletRequest)
}
class com.example.projectai.dto.TextractDTO {
- List<ItemLine> itemLines
- List<SummaryField> summaryFields
- List<SpecialField> specialFields
}
class com.example.projectai.dto.PaymentDTO {
- String id
- String imageBill
- String uploadDate
- String type
- List<ItemLine> itemLines
- List<SpecialField> specialFields
- List<SummaryField> summaryFields
- CustomerDTO customer
}
interface com.example.projectai.service.IDailyMoneyService {
~ List<DailyMoneyEntity> findAllDailyMoney()
~ DailyMoneyEntity save(DailyMoneyEntity)
~ Boolean delete(String)
~ Optional<DailyMoneyEntity> findByCustomer(String)
}
interface com.example.projectai.repository.UserRepository {
~ Optional<UserEntity> findByUsername(String)
~ Boolean existsByEmail(String)
~ Boolean existsByUsername(String)
}
class com.example.projectai.security.principle.UserDetailService {
- UserRepository userRepository
+ UserDetails loadUserByUsername(String)
}
interface com.example.projectai.service.ICustomerService {
~ List<CustomerEntity> findAllCustomer()
~ CustomerEntity save(CustomerEntity)
~ Boolean delete(String)
~ Optional<CustomerEntity> findCustomerByUserId(String)
}
interface com.example.projectai.repository.DailyMoneyRepository {
~ Optional<DailyMoneyEntity> findByCustomer(String)
}
interface com.example.projectai.service.ITextractService {
~ void DisplayAnalyzeExpenseSummaryInfo(ExpenseDocument)
~ void DisplayAnalyzeExpenseLineItemGroupsInfo(ExpenseDocument)
}
class com.example.projectai.manager.Impl.RoleManagerServiceImpl {
- {static} ModelMapper modelMapper
- IRoleService roleService
+ RoleDTO save(RoleDTO)
+ Optional<RoleDTO> findRoleDTOByName(String)
+ List<RoleDTO> findAllRoleDTO()
}
class com.example.projectai.entity.PaymentEntity {
- String id
- String imageBill
- String uploadDate
- String type
- List<ItemLine> itemLines
- List<SpecialField> specialFields
- List<SummaryField> summaryFields
- CustomerEntity customer
}
class com.example.projectai.exception.RecordNotFoundException {
}
interface com.example.projectai.repository.RoleRepository {
~ Optional<RoleEntity> findByName(String)
~ Optional<RoleEntity> findRoleEntityById(String)
}
class com.example.projectai.dto.BoundingBox {
- Float width
- Float height
- Float left
- Float top
+ void setBox(ExpenseField)
}
class com.example.projectai.exception.CustomExceptionHandler {
+ ResponseEntity<Object> handleAllExceptions(Exception,WebRequest)
+ ResponseEntity<Object> handleUserNotFoundException(RecordNotFoundException,WebRequest)
# ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException,HttpHeaders,HttpStatus,WebRequest)
}
class com.example.projectai.dto.FirebaseCredential {
- String type
- String project_id
- String private_key_id
- String private_key
- String client_email
- String client_id
- String auth_uri
- String token_uri
- String auth_provider_x509_cert_url
- String client_x509_cert_url
}
class com.example.projectai.dto.DailyMoneyDTO {
- String id
- String nameMoney
- Float money
- String date
- String description
- CustomerDTO customerDTO
}
class com.example.projectai.manager.Impl.UserManagerServiceImpl {
- {static} ModelMapper modelMapper
- IUserService userService
- IRoleService roleService
+ List<UserDTO> findAllUserDTO()
+ UserDTO save(UserDTO)
+ Boolean existsByEmail(String)
+ Boolean existsByUsername(String)
}
interface com.example.projectai.manager.IMonthlyMoneyManagerService {
~ List<MonthlyMoneyDTO> findAllMonthlyMoneyDTO()
~ MonthlyMoneyDTO save(MonthlyMoneyDTO,String)
~ Integer delete(Map<String,List<String>>)
}
class com.example.projectai.entity.UserEntity {
- String id
- String username
- String password
- String email
- String avatar
- RoleEntity role
}
class com.example.projectai.ProjectAiApplicationTests {
~ void contextLoads()
}
interface com.example.projectai.repository.MonthlyMoneyRepository {
~ Optional<MonthlyMoneyEntity> findByCustomer(String)
}
interface com.example.projectai.manager.IRoleManagerService {
~ RoleDTO save(RoleDTO)
~ Optional<RoleDTO> findRoleDTOByName(String)
~ List<RoleDTO> findAllRoleDTO()
}
class com.example.projectai.dto.RoleDTO {
- String id
- String name
}
interface com.example.projectai.manager.ICustomerManagerService {
~ List<CustomerDTO> findAllCustomerDTO()
~ CustomerDTO  save(CustomerDTO,String)
~ Integer delete(Map<String,List<String>>)
~ Optional<CustomerDTO> getCustomerByToken(String)
}
class com.example.projectai.service.Impl.SendGridEmailImpl {
- SendGrid sg
- Email from
- Environment environment
- void initializeSendGrid()
+ void sendMail(String,String,String)
}
class com.example.projectai.service.Impl.MonthlyMoneyServiceImpl {
~ MonthlyMoneyRepository repository
+ List<MonthlyMoneyEntity> findAllMonthlyMoney()
+ MonthlyMoneyEntity save(MonthlyMoneyEntity)
+ Optional<MonthlyMoneyEntity> findByCustomer(String)
+ Boolean delete(String)
}
interface com.example.projectai.manager.IUserManagerService {
~ List<UserDTO> findAllUserDTO()
~ UserDTO save(UserDTO)
~ Boolean existsByEmail(String)
~ Boolean existsByUsername(String)
}
interface com.example.projectai.manager.IDailyMoneyManagerService {
~ List<DailyMoneyDTO> findAllDailyMoneyDTO()
~ DailyMoneyDTO save(DailyMoneyDTO,String)
~ Integer delete(Map<String,List<String>>)
}
class com.example.projectai.security.principle.UserPrinciple {
- String id
- String username
- String password
- String email
- String avatar
- Collection<? extends GrantedAuthority> roles
+ {static} UserPrinciple build(UserEntity)
+ Collection<? extends GrantedAuthority> getAuthorities()
+ String getPassword()
+ String getUsername()
+ boolean isAccountNonExpired()
+ boolean isAccountNonLocked()
+ boolean isCredentialsNonExpired()
+ boolean isEnabled()
}
class com.example.projectai.ProjectAiApplication {
+ {static} void main(String[])
}
class com.example.projectai.service.Impl.DailyMoneyServiceImpl {
~ DailyMoneyRepository repository
+ List<DailyMoneyEntity> findAllDailyMoney()
+ DailyMoneyEntity save(DailyMoneyEntity)
+ Boolean delete(String)
+ Optional<DailyMoneyEntity> findByCustomer(String)
}
class com.example.projectai.entity.RoleEntity {
- String id
- String name
}
class com.example.projectai.dto.ItemLine {
- String item
- Float price
- BoundingBox boundingBoxItem
- BoundingBox boundingBoxPrice
}
class com.example.projectai.dto.SpecialField {
- String fieldName
- String value
- BoundingBox boundingBox
}
class com.example.projectai.dto.MonthlyMoneyDTO {
- String id
- String nameMoney
- Float money
- String date
- String description
- CustomerDTO customer
}
class com.example.projectai.config.WebSecurityConfig {
~ UserDetailService userDetailService
~ JwtEntryPoint jwtEntryPoint
+ JwtTokenFilter jwtTokenFilter()
~ PasswordEncoder passwordEncoder()
+ AuthenticationManager authenticationManagerBean()
# void configure(AuthenticationManagerBuilder)
# void configure(HttpSecurity)
}
class com.example.projectai.dto.SummaryField {
- String fieldName
- String value
- BoundingBox boundingBox
}
class com.example.projectai.manager.Impl.MonthlyManagerServiceImpl {
- {static} ModelMapper modelMapper
~ IUserService userService
~ IMonthlyMoneyService monthlyMoneyService
~ ICustomerService customerService
+ List<MonthlyMoneyDTO> findAllMonthlyMoneyDTO()
+ MonthlyMoneyDTO save(MonthlyMoneyDTO,String)
+ Integer delete(Map<String,List<String>>)
}
class com.example.projectai.controller.PaymentController {
- IPaymentManagerService paymentManagerService
- JwtProvider jwtProvider
+ ResponseEntity<List<PaymentDTO>> findAllPayment()
+ ResponseEntity<PaymentDTO> createPayment(MultipartFile,String,HttpServletRequest)
+ ResponseEntity<PaymentDTO> createOrUpdatePayment(PaymentDTO,HttpServletRequest)
+ ResponseEntity<PaymentDTO> updatePayment(HttpServletRequest,PaymentDTO)
+ ResponseEntity<String> deletePayment(Map<String,List<String>>,HttpServletRequest)
+ ResponseEntity<List<PaymentDTO>> getPaymentOfCustomer(HttpServletRequest,String)
}
interface com.example.projectai.service.IRoleService {
~ RoleEntity save(RoleEntity)
~ Optional<RoleEntity> findRoleEntityByName(String)
~ List<RoleEntity> findAllRole()
}
interface com.example.projectai.service.IMonthlyMoneyService {
~ List<MonthlyMoneyEntity> findAllMonthlyMoney()
~ MonthlyMoneyEntity save(MonthlyMoneyEntity)
~ Optional<MonthlyMoneyEntity> findByCustomer(String)
~ Boolean delete(String)
}
class com.example.projectai.service.Impl.UserServiceImpl {
- UserRepository userRepository
+ List<UserEntity> findAllUser()
+ UserEntity save(UserEntity)
+ Optional<UserEntity> findByUsername(String)
+ Boolean existsByEmail(String)
+ Boolean existsByUsername(String)
}
class com.example.projectai.service.Impl.TextractServiceImpl {
+ TextractDTO textractDTO
+ void initializeTextract(File)
+ void DisplayAnalyzeExpenseSummaryInfo(ExpenseDocument)
+ void DisplayAnalyzeExpenseLineItemGroupsInfo(ExpenseDocument)
}
class com.example.projectai.service.Impl.RoleServiceImpl {
- RoleRepository roleRepository
+ RoleEntity save(RoleEntity)
+ Optional<RoleEntity> findRoleEntityByName(String)
+ List<RoleEntity> findAllRole()
}
class com.example.projectai.controller.MonthlyMoneyController {
- IMonthlyMoneyManagerService monthlyMoneyManagerService
- JwtProvider jwtProvider
+ ResponseEntity<List<MonthlyMoneyDTO>> findAllMonthMoney()
+ ResponseEntity<MonthlyMoneyDTO> createMonthMoney(MonthlyMoneyDTO,HttpServletRequest)
+ ResponseEntity<String> deleteMonthMoney(Map<String,List<String>>,HttpServletRequest)
}
class com.example.projectai.controller.RoleController {
- IRoleManagerService roleManagerService
+ ResponseEntity<List<RoleDTO>> findAllRole()
+ ResponseEntity<RoleDTO> createRole(RoleDTO)
}
class com.example.projectai.controller.DailyMoneyController {
- IDailyMoneyManagerService dailyMoneyManagerService
- JwtProvider jwtProvider
+ ResponseEntity<List<DailyMoneyDTO>> findAllDailyMoney()
+ ResponseEntity<DailyMoneyDTO> createDaily(DailyMoneyDTO,HttpServletRequest)
+ ResponseEntity<String> deleteDailyMoney(Map<String,List<String>>,HttpServletRequest)
}
interface com.example.projectai.service.IUserService {
~ List<UserEntity> findAllUser()
~ UserEntity save(UserEntity)
~ Optional<UserEntity> findByUsername(String)
~ Boolean existsByEmail(String)
~ Boolean existsByUsername(String)
}
class com.example.projectai.security.jwt.JwtProvider {
- {static} Logger logger
- String HEADER
- String jwtSecret
- String tokenWrapper
- int jwtExpiration
+ boolean preHandle(HttpServletRequest)
+ String createToken(Authentication)
+ boolean validateToken(String)
+ String getUsernameFormToken(String)
}
class com.example.projectai.service.Impl.CustomerServiceImpl {
~ CustomerRepository repository
+ List<CustomerEntity> findAllCustomer()
+ CustomerEntity save(CustomerEntity)
+ Boolean delete(String)
+ Optional<CustomerEntity> findCustomerByUserId(String)
}
class com.example.projectai.manager.Impl.PaymentManagerServiceImpl {
- {static} ModelMapper modelMapper
~ FirebaseStorageStrategy firebaseStorageStrategy
~ IPaymentService paymentService
~ ICustomerService customerService
~ IUserService userService
~ TextractServiceImpl textractService
- Optional<CustomerEntity> optionalCustomer
+ List<PaymentDTO> findAllPaymentDTO()
+ PaymentDTO save(String,MultipartFile,String)
+ PaymentDTO saveHandPayment(String,PaymentDTO)
+ PaymentDTO update(PaymentDTO)
+ Integer delete(Map<String,List<String>>)
+ List<PaymentEntity> findPaymentByCustomer(String)
+ List<PaymentDTO> findAllPaymentByCustomer(String,String)
}
interface com.example.projectai.repository.PaymentRepository {
~ List<PaymentEntity> findAllByCustomer(String)
~ Optional<PaymentEntity> findByCustomer(String)
~ List<PaymentEntity> findAllByCustomerAndType(String,String)
}
class com.example.projectai.controller.UserController {
- IUserManagerService userManagerService
+ ResponseEntity<List<UserDTO>> findAllUser()
+ ResponseEntity<UserDTO> createUser(UserDTO)
}
class com.example.projectai.response.ErrorResponse {
- String message
- List<String> details
}
class com.example.projectai.entity.DailyMoneyEntity {
- String id
- String nameMoney
- Float money
- String date
- String description
- CustomerEntity customer
}
class com.example.projectai.controller.AuthController {
~ IUserManagerService userManagerService
~ JwtProvider jwtProvider
~ AuthenticationManager authenticationManager
~ PasswordEncoder passwordEncoder
+ ResponseEntity<UserDTO> userRegister(UserDTO)
+ ResponseEntity<JwtResponse> userLogin(UserDTO)
}
class com.example.projectai.entity.CustomerEntity {
- String id
- String firstName
- String lastName
- Float personalIncome
- String monthlySpending
- UserEntity user
}
class com.example.projectai.service.Impl.FirebaseStorageStrategy {
~ TextractServiceImpl textractService
- Logger log
- Environment environment
- StorageOptions storageOptions
- String bucketName
- String projectId
- StringBuilder firebaseURL
- void initializeFirebase()
+ String[] uploadFile(MultipartFile)
+ ResponseEntity<Object> downloadFile(String,HttpServletRequest)
- String generateFileName(MultipartFile)
+ File convertMultiPartToFile(MultipartFile)
+ FileDTO uploadFileDTO(MultipartFile)
+ ResponseEntity<Object> downloadFileEntity(String,HttpServletRequest)
- InputStream createFirebaseCredential()
}
class com.example.projectai.service.Impl.PaymentServiceImpl {
~ PaymentRepository repository
+ List<PaymentEntity> findAllPayment()
+ PaymentEntity save(PaymentEntity)
+ boolean delete(String)
+ List<PaymentEntity> findAllByCustomer(String)
+ List<PaymentEntity> findAllByCustomerAndType(String,String)
+ Optional<PaymentEntity> findByCustomer(String)
}
class com.example.projectai.manager.Impl.DailyMoneyManagerServiceImpl {
- {static} ModelMapper modelMapper
~ IUserService userService
~ IPaymentService paymentService
~ IDailyMoneyService dailyMoneyService
~ ICustomerService customerService
+ List<DailyMoneyDTO> findAllDailyMoneyDTO()
+ DailyMoneyDTO save(DailyMoneyDTO,String)
+ Integer delete(Map<String,List<String>>)
+ List<PaymentEntity> findPaymentByCustomer(String)
}
class com.example.projectai.entity.MonthlyMoneyEntity {
- String id
- String nameMoney
- Float money
- String date
- String description
- CustomerEntity customer
}


org.springframework.boot.web.servlet.support.SpringBootServletInitializer <|-- com.example.projectai.ServletInitializer
org.springframework.data.mongodb.repository.MongoRepository <|-- com.example.projectai.repository.CustomerRepository
com.example.projectai.manager.ICustomerManagerService <|.. com.example.projectai.manager.Impl.CustomerManagerServiceImpl
java.io.Serializable <|.. com.example.projectai.dto.UserDTO
org.springframework.security.web.AuthenticationEntryPoint <|.. com.example.projectai.security.jwt.JwtEntryPoint
org.springframework.web.filter.OncePerRequestFilter <|-- com.example.projectai.security.jwt.JwtTokenFilter
org.springframework.data.mongodb.repository.MongoRepository <|-- com.example.projectai.repository.UserRepository
org.springframework.security.core.userdetails.UserDetailsService <|.. com.example.projectai.security.principle.UserDetailService
org.springframework.data.mongodb.repository.MongoRepository <|-- com.example.projectai.repository.DailyMoneyRepository
com.example.projectai.manager.IRoleManagerService <|.. com.example.projectai.manager.Impl.RoleManagerServiceImpl
com.example.projectai.exception.RuntimeException <|-- com.example.projectai.exception.RecordNotFoundException
org.springframework.data.mongodb.repository.MongoRepository <|-- com.example.projectai.repository.RoleRepository
org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler <|-- com.example.projectai.exception.CustomExceptionHandler
com.example.projectai.manager.IUserManagerService <|.. com.example.projectai.manager.Impl.UserManagerServiceImpl
java.io.Serializable <|.. com.example.projectai.entity.UserEntity
org.springframework.data.mongodb.repository.MongoRepository <|-- com.example.projectai.repository.MonthlyMoneyRepository
com.example.projectai.service.ISendGridEmailService <|.. com.example.projectai.service.Impl.SendGridEmailImpl
com.example.projectai.service.IMonthlyMoneyService <|.. com.example.projectai.service.Impl.MonthlyMoneyServiceImpl
org.springframework.security.core.userdetails.UserDetails <|.. com.example.projectai.security.principle.UserPrinciple
com.example.projectai.service.IDailyMoneyService <|.. com.example.projectai.service.Impl.DailyMoneyServiceImpl
org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter <|-- com.example.projectai.config.WebSecurityConfig
com.example.projectai.manager.IMonthlyMoneyManagerService <|.. com.example.projectai.manager.Impl.MonthlyManagerServiceImpl
com.example.projectai.service.IUserService <|.. com.example.projectai.service.Impl.UserServiceImpl
com.example.projectai.service.ITextractService <|.. com.example.projectai.service.Impl.TextractServiceImpl
com.example.projectai.service.IRoleService <|.. com.example.projectai.service.Impl.RoleServiceImpl
com.example.projectai.service.ICustomerService <|.. com.example.projectai.service.Impl.CustomerServiceImpl
com.example.projectai.manager.IPaymentManagerService <|.. com.example.projectai.manager.Impl.PaymentManagerServiceImpl
org.springframework.data.mongodb.repository.MongoRepository <|-- com.example.projectai.repository.PaymentRepository
com.example.projectai.service.StorageStrategy <|.. com.example.projectai.service.Impl.FirebaseStorageStrategy
com.example.projectai.service.IPaymentService <|.. com.example.projectai.service.Impl.PaymentServiceImpl
com.example.projectai.manager.IDailyMoneyManagerService <|.. com.example.projectai.manager.Impl.DailyMoneyManagerServiceImpl
@enduml